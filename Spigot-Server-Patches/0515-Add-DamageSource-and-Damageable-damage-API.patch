From dc79f02952028394e7a001ae15de7b3c503d14ee Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 3 May 2020 11:36:51 +0900
Subject: [PATCH] Add DamageSource and Damageable#damage API


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index e6d050099..384223ee9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -70,4 +70,11 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
     public void resetMaxHealth() {
         getParent().resetMaxHealth();
     }
+
+    // Paper start
+    @Override
+    public void damage(xyz.acrylicstyle.paper.DamageSource damageSource, float amount) {
+        getParent().damage(damageSource, amount);
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 245bd116d..cb3bc99a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -85,6 +85,7 @@ import org.bukkit.potion.PotionType;
 import org.bukkit.util.BlockIterator;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import xyz.acrylicstyle.paper.CraftDamageSource;
 
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
@@ -152,6 +153,13 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         setMaxHealth(getHandle().getAttributeInstance(GenericAttributes.MAX_HEALTH).getAttribute().getDefault());
     }
 
+    // Paper start
+    @Override
+    public void damage(xyz.acrylicstyle.paper.DamageSource damageSource, float amount) {
+        getHandle().damageEntity(CraftDamageSource.asNMSCopy(damageSource), amount);
+    }
+    // Paper end
+
     @Override
     public double getEyeHeight() {
         return getHandle().getHeadHeight();
diff --git a/src/main/java/xyz/acrylicstyle/paper/CraftDamageSource.java b/src/main/java/xyz/acrylicstyle/paper/CraftDamageSource.java
new file mode 100644
index 000000000..a0060141a
--- /dev/null
+++ b/src/main/java/xyz/acrylicstyle/paper/CraftDamageSource.java
@@ -0,0 +1,63 @@
+package xyz.acrylicstyle.paper;
+
+import javax.annotation.Nonnull;
+
+public final class CraftDamageSource {
+    @Nonnull
+    public static net.minecraft.server.DamageSource asNMSCopy(DamageSource damageSource) {
+        try {
+            return (net.minecraft.server.DamageSource) net.minecraft.server.DamageSource.class.getField(damageSource.name()).get(null);
+        } catch (ReflectiveOperationException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Nonnull
+    public static DamageSource asBukkitCopy(net.minecraft.server.DamageSource damageSource) {
+        if (damageSource.equals(net.minecraft.server.DamageSource.ANVIL)) {
+            return DamageSource.ANVIL;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.BURN)) {
+            return DamageSource.BURN;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.CACTUS)) {
+            return DamageSource.CACTUS;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.CRAMMING)) {
+            return DamageSource.CRAMMING;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.DRAGON_BREATH)) {
+            return DamageSource.DRAGON_BREATH;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.DROWN)) {
+            return DamageSource.DROWN;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.DRYOUT)) {
+            return DamageSource.DRYOUT;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.FALL)) {
+            return DamageSource.FALL;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.FALLING_BLOCK)) {
+            return DamageSource.FALLING_BLOCK;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.FIRE)) {
+            return DamageSource.FIRE;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.FIREWORKS)) {
+            return DamageSource.FIREWORKS;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.FLY_INTO_WALL)) {
+            return DamageSource.FLY_INTO_WALL;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.GENERIC)) {
+            return DamageSource.GENERIC;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.HOT_FLOOR)) {
+            return DamageSource.HOT_FLOOR;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.LAVA)) {
+            return DamageSource.LAVA;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.LIGHTNING)) {
+            return DamageSource.LIGHTNING;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.MAGIC)) {
+            return DamageSource.MAGIC;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.OUT_OF_WORLD)) {
+            return DamageSource.OUT_OF_WORLD;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.STARVE)) {
+            return DamageSource.STARVE;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.STUCK)) {
+            return DamageSource.STUCK;
+        } else if (damageSource.equals(net.minecraft.server.DamageSource.SWEET_BERRY_BUSH)) {
+            return DamageSource.SWEET_BERRY_BUSH;
+        } else {
+            throw new IllegalArgumentException("Unknown DamageSource: " + damageSource);
+        }
+    }
+}
-- 
2.21.0.windows.1

