From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Thu, 11 Jun 2020 23:52:26 +0900
Subject: [PATCH] Fix Compilation Error


diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index fdc78d5707679272ac4d9399986baec428d615d2..3c5e8026b80de78f05292ffbb9140473cab90c56 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -175,33 +175,33 @@ public abstract class PlayerList {
         final ChunkCoordIntPair pos = new ChunkCoordIntPair(chunkX, chunkZ);
         PlayerChunkMap playerChunkMap = finalWorldserver.getChunkProvider().playerChunkMap;
         playerChunkMap.chunkDistanceManager.addTicketAtLevel(TicketType.LOGIN, pos, 31, pos.pair());
-        worldserver.getChunkProvider().markAreaHighPriority(pos, 28, 3);
-        worldserver.getChunkProvider().getChunkAtAsynchronously(chunkX, chunkZ, true, false).thenApply(chunk -> {
+        finalWorldserver.getChunkProvider().markAreaHighPriority(pos, 28, 3);
+            finalWorldserver.getChunkProvider().getChunkAtAsynchronously(chunkX, chunkZ, true, false).thenApply(chunk2 -> {
             PlayerChunk updatingChunk = playerChunkMap.getUpdatingChunk(pos.pair());
             if (updatingChunk != null) {
                 return updatingChunk.getEntityTickingFuture();
             } else {
                 return CompletableFuture.completedFuture(chunk);
             }
-        }).thenAccept(chunk -> {
+        }).thenAccept(chunk3 -> {
             playerconnection.playerJoinReady = () -> {
                 postChunkLoadJoin(
                     entityplayer, finalWorldserver, networkmanager, playerconnection,
                     nbttagcompound, networkmanager.getSocketAddress().toString(), lastKnownName
                 );
             };
-        }));
+        });
         // boost the priorities
-        worldserver.asyncChunkTaskManager.raisePriority(chunkX, chunkZ, com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY);
+            finalWorldserver.asyncChunkTaskManager.raisePriority(chunkX, chunkZ, com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY);
         for (int cx = -1; cx <= 1; cx++) {
             for (int cz = -1; cz <= 1; cz++) {
                 if (cx == 0 && cz == 0) continue;
                 // we have to directly request it otherwise the task won't be started yet to boost priority
-                worldserver.getChunkProvider().getFullChunkAsync(chunkX + cx, chunkZ + cz, null);
-                worldserver.asyncChunkTaskManager.raisePriority(chunkX + cx, chunkZ + cz, com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY);
+                finalWorldserver.getChunkProvider().getFullChunkAsync(chunkX + cx, chunkZ + cz, null);
+                finalWorldserver.asyncChunkTaskManager.raisePriority(chunkX + cx, chunkZ + cz, com.destroystokyo.paper.io.PrioritizedTaskQueue.HIGHEST_PRIORITY);
             }
         }
-    }
+    }));}
 
     EntityPlayer getActivePlayer(UUID uuid) {
         EntityPlayer player = this.getUUIDMap().get(uuid);
@@ -261,7 +261,7 @@ public abstract class PlayerList {
             // Paper start - Recipients for join and quit messages. (SPIGOT-809)
             IChatBaseComponent[] chatMessage = CraftChatMessage.fromString(joinMessage);
             server.sendMessage(chatmessage);
-            playerJoinEvent.getRecipients().forEach(new Consumer<Player>() {
+            playerJoinEvent.getRecipients().forEach(new java.util.function.Consumer<Player>() {
                 @Override
                 public void accept(Player player) {
                     ((org.bukkit.craftbukkit.entity.CraftPlayer) player).getHandle().sendMessage(chatMessage);
