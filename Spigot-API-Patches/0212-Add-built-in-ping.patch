From 1ffc39a0674fa57492c7a5bbb0ceaec48fb82eab Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Tue, 5 May 2020 17:57:56 +0900
Subject: [PATCH] Add built-in /ping


diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 460fda05..d01de91a 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -38,6 +38,7 @@ public class SimpleCommandMap implements CommandMap {
         register("bukkit", new VersionCommand("version"));
         register("bukkit", new ReloadCommand("reload"));
         register("bukkit", new PluginsCommand("plugins"));
+        register("bukkit", new xyz.acrylicstyle.paper.command.defaults.PingCommand("ping")); // Paper
         register("bukkit", new co.aikar.timings.TimingsCommand("timings")); // Paper
     }
 
diff --git a/src/main/java/xyz/acrylicstyle/paper/command/defaults/PingCommand.java b/src/main/java/xyz/acrylicstyle/paper/command/defaults/PingCommand.java
new file mode 100644
index 00000000..6e077d61
--- /dev/null
+++ b/src/main/java/xyz/acrylicstyle/paper/command/defaults/PingCommand.java
@@ -0,0 +1,57 @@
+package xyz.acrylicstyle.paper.command.defaults;
+
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.command.defaults.BukkitCommand;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collections;
+import java.util.List;
+
+public class PingCommand extends BukkitCommand {
+    public PingCommand(@NotNull String name) {
+        super(name);
+        this.description = "Get your ping between server.";
+        this.usageMessage = "/ping";
+    }
+
+    @Override
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+        if (!(sender instanceof Player) && args.length == 0) {
+            sender.sendMessage(ChatColor.RED + "You must specify player to get ping.");
+            return true;
+        }
+        if (args.length == 0) {
+            Player player = (Player) sender;
+            sender.sendMessage(ChatColor.GREEN + "Ping: " + getPingMessage(player.spigot().getPing()));
+            return true;
+        }
+        String p = args[0];
+        Player player = Bukkit.getPlayer(p);
+        if (player == null) {
+            sender.sendMessage(ChatColor.RED + "Player could not be found.");
+            return true;
+        }
+        sender.sendMessage(ChatColor.GREEN + player.getName() + "'s Ping: " + getPingMessage(player.spigot().getPing()));
+        return true;
+    }
+
+    @NotNull
+    @Override
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+        return Collections.emptyList();
+    }
+
+    private String getPingMessage(int ping) {
+        String message;
+        if (ping <= 5) message = "" + ChatColor.LIGHT_PURPLE + ping;
+        else if (ping <= 50) message = "" + ChatColor.GREEN + ping;
+        else if (ping <= 200) message = "" + ChatColor.YELLOW + ping;
+        else if (ping <= 350) message = "" + ChatColor.GOLD + ping;
+        else if (ping <= 500) message = "" + ChatColor.RED + ping;
+        else message = "" + ChatColor.DARK_RED + ping;
+        return message + "ms";
+    }
+}
-- 
2.21.0.windows.1

