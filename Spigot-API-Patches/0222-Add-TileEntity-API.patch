From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: acrylic-style <me@acrylicstyle.xyz>
Date: Sun, 24 May 2020 01:25:41 +0900
Subject: [PATCH] Add TileEntity API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index a9c10228eeeaac89361c695a5ab90161b6358ca1..909cfacb7ae2356f1000a1dac348e805ebada413 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -50,6 +50,8 @@ import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import xyz.acrylicstyle.paper.block.TileEntity;
+import xyz.acrylicstyle.paper.nbt.NBTTagCompound;
 
 /**
  * Represents the Bukkit core, for version and Server singleton handling
@@ -1711,6 +1713,13 @@ public final class Bukkit {
     public static com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
         return server.getMobGoals();
     }
+
+    /**
+     * Creates TileEntity with specified data.
+     * @return TileEntity if created, null otherwise
+     */
+    @Nullable
+    public static TileEntity createTileEntity(@NotNull NBTTagCompound nbtTagCompound) { return server.createTileEntity(nbtTagCompound); }
     // Paper end
 
     @NotNull
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index cc06492f46ba5776221cd2614c1dcd8f33cc8faf..d2bc0e75b1a7edaab9e90473f72dbc84361c8d69 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -51,6 +51,8 @@ import org.bukkit.util.CachedServerIcon;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import xyz.acrylicstyle.paper.block.TileEntity; // Paper
+import xyz.acrylicstyle.paper.nbt.NBTTagCompound; // Paper
 
 /**
  * Represents a server implementation.
@@ -1495,5 +1497,12 @@ public interface Server extends PluginMessageRecipient {
      */
     @NotNull
     com.destroystokyo.paper.entity.ai.MobGoals getMobGoals();
+
+    /**
+     * Creates TileEntity with specified data.
+     * @return TileEntity if created, null otherwise
+     */
+    @Nullable
+    TileEntity createTileEntity(@NotNull NBTTagCompound nbtTagCompound);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 9518da825ed752c5a477ca9132de50f923f9192d..061d14700ebc532af828e4f170739fe4347d32b9 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -39,6 +39,7 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import xyz.acrylicstyle.paper.block.TileEntity;
 
 /**
  * Represents a world, which may contain entities, chunks and blocks
@@ -3397,6 +3398,33 @@ public interface World extends PluginMessageRecipient, Metadatable {
     @Nullable
     public DragonBattle getEnderDragonBattle();
 
+    // Paper start
+
+    /**
+     * Get the {@link TileEntity} associated with the location.
+     *
+     * If specified location does not have TileEntity, this method returns null.
+     *
+     * @param location the block location
+     * @return TileEntity if found, null otherwise
+     */
+    @Nullable
+    TileEntity getTileEntity(@NotNull Location location);
+
+    /**
+     * Get the {@link TileEntity} associated with the location.
+     *
+     * If specified location does not have TileEntity, this method returns null.
+     *
+     * @param x the X pos of the block location
+     * @param y the Y pos of the block location
+     * @param z the Z pos of the block location
+     * @return TileEntity if found, null otherwise
+     */
+    @Nullable
+    TileEntity getTileEntity(int x, int y, int z);
+    // Paper end
+
     /**
      * Represents various map environment types that a world may be
      */
diff --git a/src/main/java/xyz/acrylicstyle/paper/block/TileEntity.java b/src/main/java/xyz/acrylicstyle/paper/block/TileEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..0eb69c80f88a7ce86df3ecfc7ed227f3531a7b4f
--- /dev/null
+++ b/src/main/java/xyz/acrylicstyle/paper/block/TileEntity.java
@@ -0,0 +1,78 @@
+package xyz.acrylicstyle.paper.block;
+
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.block.Block;
+import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import xyz.acrylicstyle.paper.nbt.NBTTagCompound;
+
+public interface TileEntity {
+    /**
+     * Get world of this tile entity.<br />
+     * @return World if defined, null if undefined.
+     */
+    @Nullable
+    World getWorld();
+
+    /**
+     * Get its location of this tile entity.<br />
+     * {@link Location#getWorld()} might return null.
+     * @return Location of this tile entity
+     */
+    @NotNull
+    Location getLocation();
+
+    default boolean hasWorld() { return this.getWorld() != null; }
+
+    /**
+     * Load tile entity data from specified NBTTagCompound.
+     * @param nbtTagCompound NBTTagCompound that read data from
+     */
+    void load(@NotNull NBTTagCompound nbtTagCompound);
+
+    /**
+     * Save tile entity data into NBTTagCompound.<br />
+     * This method will modify the original NBTTagCompound.
+     * @param nbtTagCompound NBTTagCompound that will be saved into
+     * @return Saved data (Can ignore return value)
+     */
+    @NotNull
+    NBTTagCompound save(@NotNull NBTTagCompound nbtTagCompound);
+
+    /**
+     * Creates TileEntity with specified data.
+     * @return TileEntity if created, null otherwise
+     */
+    @Nullable
+    static TileEntity create(@NotNull NBTTagCompound nbtTagCompound) { return Bukkit.createTileEntity(nbtTagCompound); }
+
+    /**
+     * Forces TileEntity to update its data.
+     */
+    void update();
+
+    /**
+     * @return Block
+     */
+    @NotNull
+    Block getBlock();
+
+    /**
+     * Save TileEntity data into new NBTTagCompound.
+     * @return Saved TileEntity data represented as NBT.
+     */
+    @NotNull
+    NBTTagCompound save();
+
+    boolean isRemoved();
+
+    /**
+     * Get the owner of this TileEntity.
+     * @return InventoryHolder, null if not found
+     */
+    @Nullable
+    InventoryHolder getOwner();
+}
diff --git a/src/main/java/xyz/acrylicstyle/paper/block/TileEntityContainer.java b/src/main/java/xyz/acrylicstyle/paper/block/TileEntityContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6f5233a8e12e40f2a051877b4fb97cb229effb7
--- /dev/null
+++ b/src/main/java/xyz/acrylicstyle/paper/block/TileEntityContainer.java
@@ -0,0 +1,9 @@
+package xyz.acrylicstyle.paper.block;
+
+import org.bukkit.Nameable;
+import org.jetbrains.annotations.NotNull;
+
+public interface TileEntityContainer extends TileEntity, Nameable {
+    @NotNull
+    String getDisplayName();
+}
